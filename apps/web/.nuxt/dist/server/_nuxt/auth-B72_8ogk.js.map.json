{"file":"auth-B72_8ogk.js","mappings":";;;;;;;;;;AAKO,SAAS,gBAAgB,SAAS;AAIvC,cAAY,WAAA;AACZ,SAAO,QAAQ,YAAY;AAC7B;ACFA,MAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,EACN,OAAO;AAAA,EACP,QAAQ,CAAC,QAAQ,MAAM,mBAAmB,GAAG,CAAC;AAAA,EAC9C,QAAQ,CAAC,QAAQ,mBAAmB,OAAO,QAAQ,WAAW,MAAM,KAAK,UAAU,GAAG,CAAC;AACzF;AAEO,SAAS,UAAU,MAAM,OAAO;AACrC,QAAM,OAAO,EAAE,GAAG,gBAAgB,GAAG,MAAA;AACrC,OAAK,WAAW,CAAC,QAAQ,QAAQ;AACjC,QAAM,UAAU,eAAe,IAAI,KAAK,CAAA;AACxC,MAAI;AACJ,MAAI,KAAK,WAAW,QAAQ;AAC1B,YAAQ,KAAK,SAAS;AAAA,EACxB,WAAW,KAAK,SAAS;AACvB,YAAQ,KAAK,QAAQ,QAAA,IAAY,KAAK,IAAA;AAAA,EACxC;AACA,QAAM,aAAa,UAAU,UAAU,SAAS;AAEhD,QAAM,cAAc,MAAM,aAAa,SAAS,QAAQ,IAAI,KAAK,KAAK,WAAW;AACjF,QAAM,SAA8H,IAAI,WAAW;AAyEpH;AAC7B,UAAM,UAAU,WAAA;AAChB,UAAM,wBAAwB,MAAM;AAClC,UAAI,KAAK,YAAY,QAAQ,OAAO,OAAO,QAAQ,IAAI,CAAC,GAAG;AACzD;AAAA,MACF;AACA,cAAQ,aAAa,CAAA;AACrB,UAAI,QAAQ,QAAQ,UAAU;AAC5B,YAAI,QAAQ,OAAO,OAAO,QAAQ,SAAS,IAAI,CAAC,GAAG;AACjD;AAAA,QACF;AAAA,MAIF;AACA,cAAQ,SAAS,IAAI,IAAI,OAAO;AAChC,wBAAkB,gBAAgB,OAAO,GAAG,MAAM,OAAO,OAAO,IAAI;AAAA,IACtE;AACA,UAAM,SAAS,QAAQ,MAAM,SAAS,gBAAgB,qBAAqB;AAC3E,YAAQ,MAAM,SAAS,aAAa,MAAM;AACxC,aAAA;AACA,aAAO,sBAAA;AAAA,IACT,CAAC;AAAA,EACH;AACA,SAAO;AACT;AAOA,SAAS,eAAe,OAAO,IAAI;AACT;AACtB,WAAO,MAAM,iBAAiB,gBAAA,GAAmB,QAAQ,KAAK,IAAI,IAAI;AAAA,EACxE;AAGF;AAYA,SAAS,kBAAkB,OAAO,MAAM,OAAO,OAAO,CAAA,GAAI;AACxD,MAAI,OAAO;AACT,QAAI,UAAU,QAAQ,UAAU,QAAQ;AACtC,aAAO,UAAU,OAAO,MAAM,OAAO,IAAI;AAAA,IAC3C;AACA,QAAI,UAAU,OAAO,IAAI,MAAM,QAAQ;AACrC,aAAO,aAAa,OAAO,MAAM,IAAI;AAAA,IACvC;AAAA,EACF;AACF;ACvHA,MAAM,gBAAgB;AACtB,MAAM,iBAAiB;AAEhB,MAAM,eAAe,YAAY,QAAQ,MAAM;AACpD,QAAM,gBAAgB,iBAAA;AACtB,QAAM,UAAU,cAAc,OAAO;AACrC,QAAM,eAEF,cAAc,OAAO,QAAQ,WAAW,QAAQ;AACpD,QAAM,cAAc,UAAyB,eAAe;AAAA,IAC1D,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,MAAM;AAAA,EAAA,CACP;AACD,QAAM,eAAe,UAAyB,gBAAgB;AAAA,IAC5D,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,MAAM;AAAA,EAAA,CACP;AACD,QAAM,OAAO,IAAqB,IAAI;AACtC,QAAM,UAAU,IAAI,KAAK;AACzB,QAAM,QAAQ,IAAmB,IAAI;AAErC,QAAM,kBAAkB,SAAS,MAAM,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,YAAY,KAAK;AAC1E,QAAM,OAAO,SAAS,MAAM,KAAK,OAAO,QAAQ,IAAI;AAEpD,iBAAe,SAAS,SAA0B;AAChD,WAAO,aAAa,GAAG,OAAO,kBAAkB,OAAO;AAAA,EACzD;AAEA,iBAAe,MAAM,aAA0B;AAC7C,WAAO,aAAa,GAAG,OAAO,eAAe,WAAW;AAAA,EAC1D;AAEA,iBAAe,aAAa,UAAkB,MAAqC;AACjF,YAAQ,QAAQ;AAChB,UAAM,QAAQ;AACd,QAAI;AACF,YAAM,WAAW,MAAM,OAAqB,UAAU;AAAA,QACpD,QAAQ;AAAA,QACR;AAAA,QACA,SAAS,iBAAA;AAAA,MAAiB,CAC3B;AACD,iBAAW,QAAQ;AACnB,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,YAAM,QAAQ,oBAAoB,GAAG;AACrC,YAAM;AAAA,IACR,UAAA;AACE,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,iBAAe,UAAU;AACvB,QAAI,CAAC,aAAa,OAAO;AACvB,mBAAA;AACA,aAAO;AAAA,IACT;AACA,QAAI;AACF,YAAM,WAAW,MAAM,OAAqB,GAAG,OAAO,iBAAiB;AAAA,QACrE,QAAQ;AAAA,QACR,MAAM,EAAE,cAAc,aAAa,MAAA;AAAA,QACnC,SAAS,iBAAA;AAAA,MAAiB,CAC3B;AACD,iBAAW,QAAQ;AACnB,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,mBAAA;AACA,YAAM;AAAA,IACR;AAAA,EACF;AAEA,iBAAe,mBAAmB;AAChC,QAAI,CAAC,YAAY,OAAO;AACtB,aAAO;AAAA,IACT;AACA,QAAI;AACF,YAAM,KAAK,MAAM,OAAiB,GAAG,OAAO,YAAY;AAAA,QACtD,SAAS;AAAA,UACP,eAAe,UAAU,YAAY,KAAK;AAAA,QAAA;AAAA,MAC5C,CACD;AACD,WAAK,QAAQ;AACb,aAAO;AAAA,IACT,SAAS,KAAK;AACZ,UAAI,oBAAoB,GAAG,KAAK,aAAa,OAAO;AAClD,cAAM,YAAY,MAAM,QAAA,EAAU,MAAM,MAAM,IAAI;AAClD,YAAI,WAAW;AACb,iBAAO,KAAK;AAAA,QACd;AAAA,MACF;AACA,mBAAA;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,iBAAe,SAAS;AACtB,QAAI,YAAY,OAAO;AACrB,UAAI;AACF,cAAM,OAAO,GAAG,OAAO,gBAAgB;AAAA,UACrC,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,eAAe,UAAU,YAAY,KAAK;AAAA,UAAA;AAAA,QAC5C,CACD;AAAA,MACH,SAAS,KAAK;AAEZ,gBAAQ,KAAK,iBAAiB,GAAG;AAAA,MACnC;AAAA,IACF;AACA,iBAAA;AAAA,EACF;AAEA,WAAS,WAAW,UAAwB;AAC1C,gBAAY,QAAQ,SAAS;AAC7B,iBAAa,QAAQ,SAAS;AAC9B,SAAK,QAAQ,SAAS;AAAA,EACxB;AAEA,WAAS,eAAe;AACtB,gBAAY,QAAQ;AACpB,iBAAa,QAAQ;AACrB,SAAK,QAAQ;AAAA,EACf;AAEA,WAAS,mBAAmB;AAC1B,UAAM,UAAkC;AAAA,MACtC,gBAAgB;AAAA,IAAA;AAElB,QAAI,YAAY,OAAO;AACrB,cAAQ,gBAAgB,UAAU,YAAY,KAAK;AAAA,IACrD;AACA,WAAO;AAAA,EACT;AAEA,WAAS,oBAAoB,KAAsB;AACjD,QAAI,OAAO,OAAO,QAAQ,YAAY,UAAU,KAAK;AACnD,YAAM,OAAQ,IAAmD;AACjE,UAAI,MAAM,SAAS;AACjB,eAAO,MAAM,QAAQ,KAAK,OAAO,IAAI,KAAK,QAAQ,KAAK,IAAI,IAAI,KAAK;AAAA,MACtE;AAAA,IACF;AACA,QAAI,eAAe,OAAO;AACxB,aAAO,IAAI;AAAA,IACb;AACA,WAAO;AAAA,EACT;AAEA,WAAS,oBAAoB,KAAc;AACzC,QAAI,OAAO,OAAO,QAAQ,YAAY,YAAY,KAAK;AACrD,YAAM,SAAU,IAA4B;AAC5C,aAAO,WAAW,OAAO,WAAW;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAEA,iBAAe,UAAU;AACvB,QAAI,KAAK,SAAS,CAAC,YAAY,OAAO;AACpC,aAAO,KAAK;AAAA,IACd;AACA,WAAO,iBAAA;AAAA,EACT;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ,CAAC;","names":[],"sources":["../../../../../../node_modules/nuxt/dist/app/composables/ssr.js","../../../../../../node_modules/nuxt/dist/app/composables/cookie.js","../../../../stores/auth.ts"],"sourcesContent":["import { setResponseStatus as _setResponseStatus, appendHeader, getRequestHeader, getRequestHeaders, getResponseHeader, removeResponseHeader, setResponseHeader } from \"h3\";\nimport { computed, getCurrentInstance, ref } from \"vue\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { toArray } from \"../utils.js\";\nimport { useHead } from \"./head.js\";\nexport function useRequestEvent(nuxtApp) {\n  if (import.meta.client) {\n    return;\n  }\n  nuxtApp ||= useNuxtApp();\n  return nuxtApp.ssrContext?.event;\n}\nexport function useRequestHeaders(include) {\n  if (import.meta.client) {\n    return {};\n  }\n  const event = useRequestEvent();\n  const _headers = event ? getRequestHeaders(event) : {};\n  if (!include || !event) {\n    return _headers;\n  }\n  const headers = /* @__PURE__ */ Object.create(null);\n  for (const _key of include) {\n    const key = _key.toLowerCase();\n    const header = _headers[key];\n    if (header) {\n      headers[key] = header;\n    }\n  }\n  return headers;\n}\nexport function useRequestHeader(header) {\n  if (import.meta.client) {\n    return void 0;\n  }\n  const event = useRequestEvent();\n  return event ? getRequestHeader(event, header) : void 0;\n}\nexport function useRequestFetch() {\n  if (import.meta.client) {\n    return globalThis.$fetch;\n  }\n  return useRequestEvent()?.$fetch || globalThis.$fetch;\n}\nexport function setResponseStatus(arg1, arg2, arg3) {\n  if (import.meta.client) {\n    return;\n  }\n  if (arg1 && typeof arg1 !== \"number\") {\n    return _setResponseStatus(arg1, arg2, arg3);\n  }\n  const event = useRequestEvent();\n  if (event) {\n    return _setResponseStatus(event, arg1, arg2);\n  }\n}\nexport function useResponseHeader(header) {\n  if (import.meta.client) {\n    if (import.meta.dev) {\n      return computed({\n        get: () => void 0,\n        set: () => console.warn(\"[nuxt] Setting response headers is not supported in the browser.\")\n      });\n    }\n    return ref();\n  }\n  const event = useRequestEvent();\n  return computed({\n    get() {\n      return getResponseHeader(event, header);\n    },\n    set(newValue) {\n      if (!newValue) {\n        return removeResponseHeader(event, header);\n      }\n      return setResponseHeader(event, header, newValue);\n    }\n  });\n}\nexport function prerenderRoutes(path) {\n  if (!import.meta.server || !import.meta.prerender) {\n    return;\n  }\n  const paths = toArray(path);\n  appendHeader(useRequestEvent(), \"x-nitro-prerender\", paths.map((p) => encodeURIComponent(p)).join(\", \"));\n}\nconst PREHYDRATE_ATTR_KEY = \"data-prehydrate-id\";\nexport function onPrehydrate(callback, key) {\n  if (import.meta.client) {\n    return;\n  }\n  if (typeof callback !== \"string\") {\n    throw new TypeError(\"[nuxt] To transform a callback into a string, `onPrehydrate` must be processed by the Nuxt build pipeline. If it is called in a third-party library, make sure to add the library to `build.transpile`.\");\n  }\n  const vm = getCurrentInstance();\n  if (vm && key) {\n    vm.attrs[PREHYDRATE_ATTR_KEY] ||= \"\";\n    key = \":\" + key + \":\";\n    if (!vm.attrs[PREHYDRATE_ATTR_KEY].includes(key)) {\n      vm.attrs[PREHYDRATE_ATTR_KEY] += key;\n    }\n  }\n  const code = vm && key ? `document.querySelectorAll('[${PREHYDRATE_ATTR_KEY}*=${JSON.stringify(key)}]').forEach` + callback : callback + \"()\";\n  useHead({\n    script: [{\n      key: vm && key ? key : void 0,\n      tagPosition: \"bodyClose\",\n      tagPriority: \"critical\",\n      innerHTML: code\n    }]\n  });\n  return vm && key ? vm.attrs[PREHYDRATE_ATTR_KEY] : void 0;\n}\n","import { customRef, getCurrentScope, nextTick, onScopeDispose, ref, watch } from \"vue\";\nimport { parse, serialize } from \"cookie-es\";\nimport { deleteCookie, getCookie, getRequestHeader, setCookie } from \"h3\";\nimport destr from \"destr\";\nimport { isEqual } from \"ohash\";\nimport { klona } from \"klona\";\nimport { useNuxtApp } from \"../nuxt.js\";\nimport { useRequestEvent } from \"./ssr.js\";\nimport { cookieStore } from \"#build/nuxt.config.mjs\";\nconst CookieDefaults = {\n  path: \"/\",\n  watch: true,\n  decode: (val) => destr(decodeURIComponent(val)),\n  encode: (val) => encodeURIComponent(typeof val === \"string\" ? val : JSON.stringify(val))\n};\nconst store = import.meta.client && cookieStore ? globalThis.cookieStore : void 0;\nexport function useCookie(name, _opts) {\n  const opts = { ...CookieDefaults, ..._opts };\n  opts.filter ??= (key) => key === name;\n  const cookies = readRawCookies(opts) || {};\n  let delay;\n  if (opts.maxAge !== void 0) {\n    delay = opts.maxAge * 1e3;\n  } else if (opts.expires) {\n    delay = opts.expires.getTime() - Date.now();\n  }\n  const hasExpired = delay !== void 0 && delay <= 0;\n  const shouldSetInitialClientCookie = import.meta.client && (hasExpired || cookies[name] === void 0 || cookies[name] === null);\n  const cookieValue = klona(hasExpired ? void 0 : cookies[name] ?? opts.default?.());\n  const cookie = import.meta.client && delay && !hasExpired ? cookieRef(cookieValue, delay, opts.watch && opts.watch !== \"shallow\") : ref(cookieValue);\n  if (import.meta.dev && hasExpired) {\n    console.warn(`[nuxt] not setting cookie \\`${name}\\` as it has already expired.`);\n  }\n  if (import.meta.client) {\n    let channel = null;\n    try {\n      if (!store && typeof BroadcastChannel !== \"undefined\") {\n        channel = new BroadcastChannel(`nuxt:cookies:${name}`);\n      }\n    } catch {\n    }\n    const callback = (force = false) => {\n      if (!force) {\n        if (opts.readonly || isEqual(cookie.value, cookies[name])) {\n          return;\n        }\n      }\n      writeClientCookie(name, cookie.value, opts);\n      cookies[name] = klona(cookie.value);\n      channel?.postMessage({ value: opts.encode(cookie.value) });\n    };\n    const handleChange = (data) => {\n      const value = data.refresh ? readRawCookies(opts)?.[name] : opts.decode(data.value);\n      watchPaused = true;\n      cookie.value = value;\n      cookies[name] = klona(value);\n      nextTick(() => {\n        watchPaused = false;\n      });\n    };\n    let watchPaused = false;\n    const hasScope = !!getCurrentScope();\n    if (hasScope) {\n      onScopeDispose(() => {\n        watchPaused = true;\n        callback();\n        channel?.close();\n      });\n    }\n    if (store) {\n      const changeHandler = (event) => {\n        const changedCookie = event.changed.find((c) => c.name === name);\n        const removedCookie = event.deleted.find((c) => c.name === name);\n        if (changedCookie) {\n          handleChange({ value: changedCookie.value });\n        }\n        if (removedCookie) {\n          handleChange({ value: null });\n        }\n      };\n      store.addEventListener(\"change\", changeHandler);\n      if (hasScope) {\n        onScopeDispose(() => store.removeEventListener(\"change\", changeHandler));\n      }\n    } else if (channel) {\n      channel.onmessage = ({ data }) => handleChange(data);\n    }\n    if (opts.watch) {\n      watch(\n        cookie,\n        () => {\n          if (watchPaused) {\n            return;\n          }\n          callback();\n        },\n        { deep: opts.watch !== \"shallow\" }\n      );\n    }\n    if (shouldSetInitialClientCookie) {\n      callback(shouldSetInitialClientCookie);\n    }\n  } else if (import.meta.server) {\n    const nuxtApp = useNuxtApp();\n    const writeFinalCookieValue = () => {\n      if (opts.readonly || isEqual(cookie.value, cookies[name])) {\n        return;\n      }\n      nuxtApp._cookies ||= {};\n      if (name in nuxtApp._cookies) {\n        if (isEqual(cookie.value, nuxtApp._cookies[name])) {\n          return;\n        }\n        if (import.meta.dev) {\n          console.warn(`[nuxt] cookie \\`${name}\\` was previously set to \\`${opts.encode(nuxtApp._cookies[name])}\\` and is being overridden to \\`${opts.encode(cookie.value)}\\`. This may cause unexpected issues.`);\n        }\n      }\n      nuxtApp._cookies[name] = cookie.value;\n      writeServerCookie(useRequestEvent(nuxtApp), name, cookie.value, opts);\n    };\n    const unhook = nuxtApp.hooks.hookOnce(\"app:rendered\", writeFinalCookieValue);\n    nuxtApp.hooks.hookOnce(\"app:error\", () => {\n      unhook();\n      return writeFinalCookieValue();\n    });\n  }\n  return cookie;\n}\nexport function refreshCookie(name) {\n  if (import.meta.server || store || typeof BroadcastChannel === \"undefined\") {\n    return;\n  }\n  new BroadcastChannel(`nuxt:cookies:${name}`)?.postMessage({ refresh: true });\n}\nfunction readRawCookies(opts = {}) {\n  if (import.meta.server) {\n    return parse(getRequestHeader(useRequestEvent(), \"cookie\") || \"\", opts);\n  } else if (import.meta.client) {\n    return parse(document.cookie, opts);\n  }\n}\nfunction serializeCookie(name, value, opts = {}) {\n  if (value === null || value === void 0) {\n    return serialize(name, value, { ...opts, maxAge: -1 });\n  }\n  return serialize(name, value, opts);\n}\nfunction writeClientCookie(name, value, opts = {}) {\n  if (import.meta.client) {\n    document.cookie = serializeCookie(name, value, opts);\n  }\n}\nfunction writeServerCookie(event, name, value, opts = {}) {\n  if (event) {\n    if (value !== null && value !== void 0) {\n      return setCookie(event, name, value, opts);\n    }\n    if (getCookie(event, name) !== void 0) {\n      return deleteCookie(event, name, opts);\n    }\n  }\n}\nconst MAX_TIMEOUT_DELAY = 2147483647;\nfunction cookieRef(value, delay, shouldWatch) {\n  let timeout;\n  let unsubscribe;\n  let elapsed = 0;\n  const internalRef = shouldWatch ? ref(value) : { value };\n  if (getCurrentScope()) {\n    onScopeDispose(() => {\n      unsubscribe?.();\n      clearTimeout(timeout);\n    });\n  }\n  return customRef((track, trigger) => {\n    if (shouldWatch) {\n      unsubscribe = watch(internalRef, trigger);\n    }\n    function createExpirationTimeout() {\n      elapsed = 0;\n      clearTimeout(timeout);\n      const timeRemaining = delay - elapsed;\n      const timeoutLength = timeRemaining < MAX_TIMEOUT_DELAY ? timeRemaining : MAX_TIMEOUT_DELAY;\n      timeout = setTimeout(() => {\n        elapsed += timeoutLength;\n        if (elapsed < delay) {\n          return createExpirationTimeout();\n        }\n        internalRef.value = void 0;\n        trigger();\n      }, timeoutLength);\n    }\n    return {\n      get() {\n        track();\n        return internalRef.value;\n      },\n      set(newValue) {\n        createExpirationTimeout();\n        internalRef.value = newValue;\n        trigger();\n      }\n    };\n  });\n}\n","import { defineStore } from 'pinia'\nimport { computed, ref } from 'vue'\nimport { useCookie, useRuntimeConfig } from 'nuxt/app'\nimport { $fetch } from 'ofetch'\n\ninterface Credentials {\n  email: string\n  password: string\n}\n\ninterface RegisterPayload extends Credentials {\n  displayName: string\n  slug: string\n  phone?: string\n  categoryId?: string\n}\n\ninterface AuthProfile {\n  id: string\n  slug: string\n  displayName: string\n  status: 'DRAFT' | 'PENDING_REVIEW' | 'APPROVED' | 'SUSPENDED'\n  mode: 'CARD' | 'BROCHURE'\n  headline?: string | null\n  summary?: string | null\n}\n\ninterface AuthUser {\n  id: string\n  email: string\n  phone?: string | null\n  role: 'USER' | 'ADMIN' | 'SUPER_ADMIN'\n  isApproved: boolean\n  profile?: AuthProfile | null\n}\n\ninterface AuthResponse {\n  accessToken: string\n  refreshToken: string\n  user: AuthUser\n}\n\nconst ACCESS_COOKIE = 'jangid_access_token'\nconst REFRESH_COOKIE = 'jangid_refresh_token'\n\nexport const useAuthStore = defineStore('auth', () => {\n  const runtimeConfig = useRuntimeConfig()\n  const baseURL = runtimeConfig.public.apiBase\n  const secureCookie = typeof window !== 'undefined'\n    ? window.location.protocol === 'https:'\n    : runtimeConfig.public.apiBase.startsWith('https:')\n  const accessToken = useCookie<string | null>(ACCESS_COOKIE, {\n    sameSite: 'lax',\n    secure: secureCookie,\n    path: '/'\n  })\n  const refreshToken = useCookie<string | null>(REFRESH_COOKIE, {\n    sameSite: 'lax',\n    secure: secureCookie,\n    path: '/'\n  })\n  const user = ref<AuthUser | null>(null)\n  const loading = ref(false)\n  const error = ref<string | null>(null)\n\n  const isAuthenticated = computed(() => !!user.value && !!accessToken.value)\n  const role = computed(() => user.value?.role ?? null)\n\n  async function register(payload: RegisterPayload) {\n    return authenticate(`${baseURL}/auth/register`, payload)\n  }\n\n  async function login(credentials: Credentials) {\n    return authenticate(`${baseURL}/auth/login`, credentials)\n  }\n\n  async function authenticate(endpoint: string, body: Credentials | RegisterPayload) {\n    loading.value = true\n    error.value = null\n    try {\n      const response = await $fetch<AuthResponse>(endpoint, {\n        method: 'POST',\n        body,\n        headers: buildAuthHeaders()\n      })\n      setSession(response)\n      return response\n    } catch (err) {\n      error.value = extractErrorMessage(err)\n      throw err\n    } finally {\n      loading.value = false\n    }\n  }\n\n  async function refresh() {\n    if (!refreshToken.value) {\n      clearSession()\n      return null\n    }\n    try {\n      const response = await $fetch<AuthResponse>(`${baseURL}/auth/refresh`, {\n        method: 'POST',\n        body: { refreshToken: refreshToken.value },\n        headers: buildAuthHeaders()\n      })\n      setSession(response)\n      return response\n    } catch (err) {\n      clearSession()\n      throw err\n    }\n  }\n\n  async function fetchCurrentUser() {\n    if (!accessToken.value) {\n      return null\n    }\n    try {\n      const me = await $fetch<AuthUser>(`${baseURL}/auth/me`, {\n        headers: {\n          Authorization: `Bearer ${accessToken.value}`\n        }\n      })\n      user.value = me\n      return me\n    } catch (err) {\n      if (isTokenExpiredError(err) && refreshToken.value) {\n        const refreshed = await refresh().catch(() => null)\n        if (refreshed) {\n          return user.value\n        }\n      }\n      clearSession()\n      return null\n    }\n  }\n\n  async function logout() {\n    if (accessToken.value) {\n      try {\n        await $fetch(`${baseURL}/auth/logout`, {\n          method: 'POST',\n          headers: {\n            Authorization: `Bearer ${accessToken.value}`\n          }\n        })\n      } catch (err) {\n        // ignore errors during logout\n        console.warn('logout failed', err)\n      }\n    }\n    clearSession()\n  }\n\n  function setSession(response: AuthResponse) {\n    accessToken.value = response.accessToken\n    refreshToken.value = response.refreshToken\n    user.value = response.user\n  }\n\n  function clearSession() {\n    accessToken.value = null\n    refreshToken.value = null\n    user.value = null\n  }\n\n  function buildAuthHeaders() {\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json'\n    }\n    if (accessToken.value) {\n      headers.Authorization = `Bearer ${accessToken.value}`\n    }\n    return headers\n  }\n\n  function extractErrorMessage(err: unknown): string {\n    if (err && typeof err === 'object' && 'data' in err) {\n      const data = (err as { data?: { message?: string | string[] } }).data\n      if (data?.message) {\n        return Array.isArray(data.message) ? data.message.join(', ') : data.message\n      }\n    }\n    if (err instanceof Error) {\n      return err.message\n    }\n    return 'Unexpected error occurred'\n  }\n\n  function isTokenExpiredError(err: unknown) {\n    if (err && typeof err === 'object' && 'status' in err) {\n      const status = (err as { status?: number }).status\n      return status === 401 || status === 403\n    }\n    return false\n  }\n\n  async function restore() {\n    if (user.value || !accessToken.value) {\n      return user.value\n    }\n    return fetchCurrentUser()\n  }\n\n  return {\n    user,\n    loading,\n    error,\n    isAuthenticated,\n    role,\n    accessToken,\n    refreshToken,\n    register,\n    login,\n    refresh,\n    fetchCurrentUser,\n    logout,\n    restore,\n    clearSession\n  }\n})\n"],"version":3}
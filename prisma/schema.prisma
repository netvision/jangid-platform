generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProfileStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  SUSPENDED
}

enum SiteMode {
  CARD
  BROCHURE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?  @unique
  passwordHash String
  role         UserRole @default(USER)
  isApproved   Boolean  @default(false)
  profile      Profile?
  sessions     Session[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Profile {
  id              String         @id @default(cuid())
  slug            String         @unique
  displayName     String
  headline        String?
  summary         String?
  mode            SiteMode       @default(CARD)
  status          ProfileStatus  @default(DRAFT)
  logoUrl         String?
  coverImageUrl   String?
  publicEmail     String?
  publicPhone     String?
  address         String?
  website         String?
  socialLinks     Json?
  sections        Json?
  category        Category?       @relation(fields: [categoryId], references: [id])
  categoryId      String?
  theme           Theme?          @relation(fields: [themeId], references: [id])
  themeId         String?
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @unique
  highlights      Highlight[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  profiles    Profile[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Theme {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  thumbnail   String?
  config      Json     @default("{}")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profiles    Profile[]
}

model Highlight {
  id          String   @id @default(cuid())
  title       String
  description String?
  accentColor String?
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   String
  startsAt    DateTime @default(now())
  endsAt      DateTime?
  createdAt   DateTime @default(now())
}

model Session {
  id                String   @id
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  refreshTokenHash  String
  userAgent         String?
  ipAddress         String?
  expiresAt         DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([expiresAt])
}
